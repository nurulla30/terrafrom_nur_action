name: 'Terraform CI/CD Pipeline'

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select which environment(s) to run'
        required: true
        default: dev
        type: choice
        options:
          - dev
          - dev+qa
          - dev+qa+prod

jobs:
  # Stage for Dev Environment
  dev-plan:
    name: "Dev Plan"
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.environment, 'dev')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Azure Login for Dev
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_DEV }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID_DEV }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}

      - name: Terraform Init (Dev)
        run: terraform init -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_DEV }}" \
                            -backend-config="container_name=tfstate" \
                            -backend-config="key=dev.tfstate" \
                            -backend-config="access_key=${{ secrets.AZURE_STORAGE_KEY_DEV }}"

      - name: Terraform Plan (Dev)
        run: terraform plan -var-file="tf/dev.tfvars"

  dev-apply:
    name: "Dev Apply"
    needs: dev-plan
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.environment, 'dev')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Azure Login for Dev
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_DEV }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID_DEV }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}

      - name: Terraform Init (Dev)
        run: terraform init -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_DEV }}" \
                            -backend-config="container_name=tfstate" \
                            -backend-config="key=dev.tfstate" \
                            -backend-config="access_key=${{ secrets.AZURE_STORAGE_KEY_DEV }}"

      - name: Terraform Apply (Dev)
        run: terraform apply -auto-approve -var-file="tf/dev.tfvars"

  # Stage for QA Environment
  qa-plan:
    name: "QA Plan"
    needs: dev-apply
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.environment, 'qa')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Azure Login for QA
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_QA }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID_QA }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_QA }}

      - name: Terraform Init (QA)
        run: terraform init -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_QA }}" \
                            -backend-config="container_name=tfstate" \
                            -backend-config="key=qa.tfstate" \
                            -backend-config="access_key=${{ secrets.AZURE_STORAGE_KEY_QA }}"

      - name: Terraform Plan (QA)
        run: terraform plan -var-file="tf/qa.tfvars"

  qa-apply:
    name: "QA Apply"
    needs: qa-plan
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.environment, 'qa')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Azure Login for QA
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_QA }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID_QA }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_QA }}

      - name: Terraform Init (QA)
        run: terraform init -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_QA }}" \
                            -backend-config="container_name=tfstate" \
                            -backend-config="key=qa.tfstate" \
                            -backend-config="access_key=${{ secrets.AZURE_STORAGE_KEY_QA }}"

      - name: Terraform Apply (QA)
        run: terraform apply -auto-approve -var-file="tf/qa.tfvars"

  # Stage for Prod Environment
  prod-plan:
    name: "Prod Plan"
    needs: qa-apply
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.environment, 'prod')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Azure Login for Prod
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_PROD }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID_PROD }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_PROD }}

      - name: Terraform Init (Prod)
        run: terraform init -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_PROD }}" \
                            -backend-config="container_name=tfstate" \
                            -backend-config="key=prod.tfstate" \
                            -backend-config="access_key=${{ secrets.AZURE_STORAGE_KEY_PROD }}"

      - name: Terraform Plan (Prod)
        run: terraform plan -var-file="tf/prod.tfvars"

  prod-apply:
    name: "Prod Apply"
    needs: prod-plan
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.environment, 'prod')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Azure Login for Prod
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_PROD }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID_PROD }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_PROD }}

      - name: Terraform Init (Prod)
        run: terraform init -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_PROD }}" \
                            -backend-config="container_name=tfstate" \
                            -backend-config="key=prod.tfstate" \
                            -backend-config="access_key=${{ secrets.AZURE_STORAGE_KEY_PROD }}"

      - name: Terraform Apply (Prod)
        run: terraform apply -auto-approve -var-file="tf/prod.tfvars"
